<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="C:\Users\polch_000\PycharmProjects\digiSimul\AjoutBruit.py"><paragraph>import numpy as np
import math
from PIL import Image
from scipy import interpolate
from scipy import stats
from PIL import ImageOps
import cv2
import list
import threading
# import pyopencl as cl</paragraph><definition_list><definition_list_item><term>def echantillonageRadial(image, beamNumber, pxPerBeam, angle, height, dmin, dmax):</term><definition><paragraph>longeur, largeur = image.size
image = list(image.getdata())
image = [image[i * largeur:(i + 1) * largeur] for i in range(longeur)]
# Base sortie
imageSortie = np.zeros((longeur, largeur))
i = (3 * math.pi - angle) / 2
while i &lt; (3 * math.pi + angle) / 2:</paragraph><system_message level="3" line="20" source="C:\Users\polch_000\PycharmProjects\digiSimul\AjoutBruit.py" type="ERROR"><paragraph>Unexpected indentation.</paragraph></system_message><block_quote><paragraph>j = dmin
while j &lt; dmax:</paragraph><system_message level="3" line="22" source="C:\Users\polch_000\PycharmProjects\digiSimul\AjoutBruit.py" type="ERROR"><paragraph>Unexpected indentation.</paragraph></system_message><block_quote><paragraph>x = j * math.cos(i) + largeur / 2
y = -j * math.sin(i) + height
x = int(x)
y = int(y)
imageSortie[x][y] = image[x][y]</paragraph><paragraph>j += (((3 * math.pi + angle) / 2) - ((3 * math.pi - angle) / 2)) / (pxPerBeam - 1)</paragraph></block_quote><system_message level="2" line="29" source="C:\Users\polch_000\PycharmProjects\digiSimul\AjoutBruit.py" type="WARNING"><paragraph>Block quote ends without a blank line; unexpected unindent.</paragraph></system_message><paragraph>i += (dmax - dmin) / (beamNumber - 1)</paragraph></block_quote><system_message level="2" line="30" source="C:\Users\polch_000\PycharmProjects\digiSimul\AjoutBruit.py" type="WARNING"><paragraph>Block quote ends without a blank line; unexpected unindent.</paragraph></system_message><paragraph>return imageSortie</paragraph></definition></definition_list_item><definition_list_item><term>def echantillonageRect(npimage, longeur, largeur, nbPointAbscisse, nbpointOrdonnee):</term><definition><paragraph># Image base sortie :
imageSortie = np.ones((longeur, largeur))-2
y = 0
while y &lt; largeur:</paragraph><system_message level="3" line="38" source="C:\Users\polch_000\PycharmProjects\digiSimul\AjoutBruit.py" type="ERROR"><paragraph>Unexpected indentation.</paragraph></system_message><block_quote><paragraph>x=0
while x &lt; longeur:</paragraph><system_message level="3" line="40" source="C:\Users\polch_000\PycharmProjects\digiSimul\AjoutBruit.py" type="ERROR"><paragraph>Unexpected indentation.</paragraph></system_message><block_quote><paragraph>imageSortie[int(x)][int(y)] = npimage[int(x)][int(y)]
x += largeur</paragraph></block_quote><system_message level="2" line="42" source="C:\Users\polch_000\PycharmProjects\digiSimul\AjoutBruit.py" type="WARNING"><paragraph>Block quote ends without a blank line; unexpected unindent.</paragraph></system_message><paragraph>y += longeur/ nbpointOrdonnee</paragraph></block_quote><system_message level="2" line="43" source="C:\Users\polch_000\PycharmProjects\digiSimul\AjoutBruit.py" type="WARNING"><paragraph>Block quote ends without a blank line; unexpected unindent.</paragraph></system_message><paragraph>return imageSortie</paragraph></definition></definition_list_item><definition_list_item><term>def echantillonageRect2(npimage,nbPoint):</term><definition><paragraph>"""</paragraph><field_list><field><field_name>param npimage</field_name><field_body><paragraph>Image Ã  echantilloner en format numpy</paragraph></field_body></field><field><field_name>param nbPoint</field_name><field_body><paragraph>Ratio des points que l'on veut garder : 1 sur nbpoint</paragraph></field_body></field><field><field_name>return</field_name><field_body><paragraph>Image echantillonÃ©e sous forme de tableau numpy</paragraph></field_body></field></field_list><system_message level="2" line="52" source="C:\Users\polch_000\PycharmProjects\digiSimul\AjoutBruit.py" type="WARNING"><paragraph>Field list ends without a blank line; unexpected unindent.</paragraph></system_message><paragraph>"""
longeur,largeur = npimage.shape
y = 0
while y &lt; int(largeur/nbPoint):</paragraph><system_message level="3" line="56" source="C:\Users\polch_000\PycharmProjects\digiSimul\AjoutBruit.py" type="ERROR"><paragraph>Unexpected indentation.</paragraph></system_message><block_quote><paragraph>again = 1
while again &lt; nbPoint:</paragraph><system_message level="3" line="58" source="C:\Users\polch_000\PycharmProjects\digiSimul\AjoutBruit.py" type="ERROR"><paragraph>Unexpected indentation.</paragraph></system_message><block_quote><paragraph>npimage = np.delete(npimage,(y),axis=1)
again += 1</paragraph></block_quote><system_message level="2" line="60" source="C:\Users\polch_000\PycharmProjects\digiSimul\AjoutBruit.py" type="WARNING"><paragraph>Block quote ends without a blank line; unexpected unindent.</paragraph></system_message><paragraph>y += 1</paragraph></block_quote><system_message level="2" line="61" source="C:\Users\polch_000\PycharmProjects\digiSimul\AjoutBruit.py" type="WARNING"><paragraph>Block quote ends without a blank line; unexpected unindent.</paragraph></system_message><paragraph>x = 0
while x &lt; int(longeur/nbPoint):</paragraph><system_message level="3" line="63" source="C:\Users\polch_000\PycharmProjects\digiSimul\AjoutBruit.py" type="ERROR"><paragraph>Unexpected indentation.</paragraph></system_message><block_quote><paragraph>again = 1
while again &lt; nbPoint:</paragraph><system_message level="3" line="65" source="C:\Users\polch_000\PycharmProjects\digiSimul\AjoutBruit.py" type="ERROR"><paragraph>Unexpected indentation.</paragraph></system_message><block_quote><paragraph>npimage = np.delete(npimage,(x),axis=0)
again += 1</paragraph></block_quote><system_message level="2" line="67" source="C:\Users\polch_000\PycharmProjects\digiSimul\AjoutBruit.py" type="WARNING"><paragraph>Block quote ends without a blank line; unexpected unindent.</paragraph></system_message><paragraph>x += 1</paragraph></block_quote><system_message level="2" line="68" source="C:\Users\polch_000\PycharmProjects\digiSimul\AjoutBruit.py" type="WARNING"><paragraph>Block quote ends without a blank line; unexpected unindent.</paragraph></system_message><paragraph>return npimage</paragraph></definition></definition_list_item><definition_list_item><term>def AjoutSpeckel( img, borneInf, borneSup, ecartTypeGauss, u):</term><definition><paragraph>longeur,largeur = img.shape
#matrices de vecteurs gaussiens
beta = 8
alpha = 1.98
# matrixGauss = stats.gennorm.rvs(beta,scale=alpha,loc=0,size=longeur*longeur*u).reshape(longeur, largeur, u)
# matrixGauss2 =  stats.gennorm.rvs(beta,scale=alpha,loc=0,size=longeur*longeur*u).reshape(longeur, largeur, u)
# matrixGauss = (stats.levy_stable_gen.rvs(alpha, 0,size = longeur*largeur*u,scale=gama).reshape(longeur, largeur, u))
# matrixGauss2 = (stats.levy_stable_gen.rvs(alpha,0,size = longeur*largeur*u,scale=gama).reshape(longeur, largeur, u))
matrixGauss = np.random.randn(longeur * largeur, u).reshape(longeur, largeur, u)
matrixGauss2 = np.random.randn(longeur * largeur, u).reshape(longeur, largeur, u)
imgRetour = np.sqrt(img + 0j)
i = 0
while i &lt; u-1:</paragraph><system_message level="3" line="85" source="C:\Users\polch_000\PycharmProjects\digiSimul\AjoutBruit.py" type="ERROR"><paragraph>Unexpected indentation.</paragraph></system_message><block_quote><paragraph>imgRetour += (matrixGauss[:,:,i]) + (matrixGauss2[:,:,i]*1j)
i += 1</paragraph></block_quote><system_message level="2" line="87" source="C:\Users\polch_000\PycharmProjects\digiSimul\AjoutBruit.py" type="WARNING"><paragraph>Block quote ends without a blank line; unexpected unindent.</paragraph></system_message><paragraph>img = np.square(imgRetour.real) + np.square(imgRetour.imag)
return img</paragraph></definition></definition_list_item><definition_list_item><term>def interpolation(img):</term><definition><paragraph>"""
Interpolation bicubique
:param img: Image Ã  interpoler sous forme de tableau numpy
:return: Fonction d'interpoaltion de l'image
"""
img = np.zeros(img.shape) + img
l,L = img.shape
x = np.arange(0,l,1)
y = np.arange(0, L, 1)
X,Y = np.meshgrid(x,y)
fonctionInter = interpolate.interp2d(x,y,img, kind='cubic')
return fonctionInter</paragraph></definition></definition_list_item><definition_list_item><term>def construireImageInterpelee(function,l,L,nbPoint):</term><definition><paragraph>"""
Reconstruit une image grÃ¢ce Ã  une RÂ² -&gt; R
:param function: Une fonction de RÂ² dans R
:param l: Longeur de l'image voulu
:param L: Largeur de l'image voulu
:param nbPoint: Nombre de point Ã  interpoler
:return: Un tableau numpy bidimentionnel reprÃ©sentant une image
"""
x = np.arange(0, l/nbPoint,1/nbPoint)
y = np.arange(0, L/nbPoint,1/nbPoint)
img = function(x,y)
return img</paragraph></definition></definition_list_item><definition_list_item><term>def AjoutBruit(image):</term><definition><paragraph>"""
Fonction principale appelant les mÃ©thodes permettant d'ajouter un bruit de peckel Ã  image de type optique</paragraph><field_list><field><field_name>param image</field_name><field_body><paragraph>Une image provenant de la bibliothÃ¨que "PIL Image"</paragraph></field_body></field><field><field_name>return</field_name><field_body><paragraph>Un tableau bidimentionel numpy reprÃ©sentant une image</paragraph></field_body></field></field_list><system_message level="2" line="126" source="C:\Users\polch_000\PycharmProjects\digiSimul\AjoutBruit.py" type="WARNING"><paragraph>Field list ends without a blank line; unexpected unindent.</paragraph></system_message><paragraph>"""
# conversion de l'image en array numpy
nbPoint = 2
l,L = image.shape
img = echantillonageRect2(image,nbPoint)
img4 = AjoutSpeckel(img, 1,1 , 0.2,3)
img5 = interpolation(img4)
img5 = construireImageInterpelee(img5,l,L,nbPoint)
return img5</paragraph></definition></definition_list_item><definition_list_item><term>def AjoutBruitMultiThreah():</term><definition><paragraph>"""
Produit plusieurs threads permettant d'utiliser tous les coeurs pour l'ajout du bruit de speckel
:return: Void
"""
img = cv2.imread("images/vador.bmp")
img = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)
t1 = threading.Thread(target=multipleImage,args=(img,1))
t2 = threading.Thread(target=multipleImage,args=(img,2))
t3 = threading.Thread(target=multipleImage,args=(img,3))
t4 = threading.Thread(target=multipleImage,args=(img,4))
t5 = threading.Thread(target=multipleImage,args=(img,5))
t6 = threading.Thread(target=multipleImage,args=(img,6))
t7 = threading.Thread(target=multipleImage,args=(img,7))
t1.start()
t2.start()
t3.start()
t4.start()
t5.start()
t6.start()
t7.start()
return 0;</paragraph></definition></definition_list_item><definition_list_item><term>def multipleImage(img,p):</term><definition><paragraph>it = 0
while it &lt; 10:</paragraph><system_message level="3" line="164" source="C:\Users\polch_000\PycharmProjects\digiSimul\AjoutBruit.py" type="ERROR"><paragraph>Unexpected indentation.</paragraph></system_message><block_quote><paragraph>print(it)
img2 = AjoutBruit(img)
img3 = Image.fromarray(img2).</paragraph><system_message level="3" line="167" source="C:\Users\polch_000\PycharmProjects\digiSimul\AjoutBruit.py" type="ERROR"><paragraph>Unexpected indentation.</paragraph></system_message><block_quote><paragraph>save("imgT1It%sP%s"%(it,p),"gif")</paragraph></block_quote><system_message level="2" line="168" source="C:\Users\polch_000\PycharmProjects\digiSimul\AjoutBruit.py" type="WARNING"><paragraph>Block quote ends without a blank line; unexpected unindent.</paragraph></system_message><paragraph>it += 1</paragraph></block_quote></definition></definition_list_item><definition_list_item><term>def trouveAlphaGama():</term><definition><paragraph>img = cv2.imread("images/01_d_3.bmp")
img = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)
l,L = img.shape
y = -1
somme = 0
sommeC = 0
cpt = 0
a = [0]
while y &lt; L-1:</paragraph><system_message level="3" line="180" source="C:\Users\polch_000\PycharmProjects\digiSimul\AjoutBruit.py" type="ERROR"><paragraph>Unexpected indentation.</paragraph></system_message><block_quote><paragraph>y +=1
x = -1
while x &lt; l-1:</paragraph><system_message level="3" line="183" source="C:\Users\polch_000\PycharmProjects\digiSimul\AjoutBruit.py" type="ERROR"><paragraph>Unexpected indentation.</paragraph></system_message><block_quote><paragraph>print(x,y)
x += 1
if ( img</paragraph><system_message level="3" line="186" source="C:\Users\polch_000\PycharmProjects\digiSimul\AjoutBruit.py" type="ERROR"><paragraph>Unexpected indentation.</paragraph></system_message><block_quote><block_quote><paragraph>[x][y] != 0):</paragraph></block_quote><system_message level="2" line="187" source="C:\Users\polch_000\PycharmProjects\digiSimul\AjoutBruit.py" type="WARNING"><paragraph>Block quote ends without a blank line; unexpected unindent.</paragraph></system_message><paragraph>a.append(img[x][y])</paragraph></block_quote></block_quote></block_quote><paragraph>print(a)
esp = np.mean(a,dtype=np.float64)
var = np.var(a,dtype=np.float64)
alpha = np.sqrt(np.square(math.pi)/(6*var))
gama = math.exp( alpha * (esp - math.log(2,10) - 0.577215664901532860606512090082402431042159335939923598805*((1/alpha)-1) ))
print(esp,var,alpha,gama)</paragraph></definition></definition_list_item></definition_list><paragraph># MAIN
img = cv2.imread("images/fg1.bmp")
img = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)
AjoutBruit(img)</paragraph><paragraph># # GPU
# # creer un contexte
# myContext = cl.create_some_context()
# # creer une file de commandes
# myQueue = cl.CommandQueue(myContext)
# # allouer et initialiser la memoire du device
# inputData = np.random.rand(50000).astype(np.float32)
# outputData = np.empty_like(inputData)
# myFlags = cl.mem_flags
# inputBuffer = cl.Buffer(myContext,
# myFlags.READ_ONLY | myFlags.COPY_HOST_PTR, hostbuf=inputData)
# outputBuffer = cl.Buffer(myContext, myFlags.WRITE_ONLY, inputData.nbytes)
# # charger et compiler le kernel
# myProgram = cl.Program(myContext,
# """__kernel void add42(__global const float <problematic ids="id2" refid="id1">*</problematic>data, __global float <problematic ids="id4" refid="id3">*</problematic>result){int gid = get_global_id(0);result[gid] = data[gid] + 42.f;}""").build()
# # ajouter le kernel dans la file de commandes
# # recuperer les donnees dans la memoire du device
# myProgram.add42(myQueue, inputData.shape,None, inputBuffer, outputBuffer)
# cl.enqueue_copy(myQueue, outputData, outputBuffer)
# # verifier le resultat du calcul
# if abs(np.linalg.norm(outputData - (inputData + 42))) &lt; 1e-6 :
#     print("passed")
# else:
#     print("failed")
#</paragraph><system_message backrefs="id2" ids="id1" level="2" line="201" source="C:\Users\polch_000\PycharmProjects\digiSimul\AjoutBruit.py" type="WARNING"><paragraph>Inline emphasis start-string without end-string.</paragraph></system_message><system_message backrefs="id4" ids="id3" level="2" line="201" source="C:\Users\polch_000\PycharmProjects\digiSimul\AjoutBruit.py" type="WARNING"><paragraph>Inline emphasis start-string without end-string.</paragraph></system_message></document>